<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
<title>AI Chatbot like ChatGPT</title>
<style>
  /* Reset & base */
  * {
    box-sizing: border-box;
  }
  body {
    margin: 0;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: #121212;
    color: #e0e0e0;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  #app {
    background: #1e1e1e;
    width: 350px;
    max-width: 100vw;
    height: 600px;
    border-radius: 12px;
    display: flex;
    flex-direction: column;
    box-shadow: 0 8px 24px rgba(0,0,0,0.7);
  }

  header {
    padding: 15px 20px;
    border-bottom: 1px solid #333;
    font-size: 1.25rem;
    font-weight: bold;
    color: #00b4d8;
    user-select: none;
  }

  #chat {
    flex: 1;
    overflow-y: auto;
    padding: 15px 20px;
    display: flex;
    flex-direction: column;
    gap: 12px;
    scroll-behavior: smooth;
  }

  .message {
    max-width: 80%;
    padding: 12px 15px;
    border-radius: 20px;
    line-height: 1.4;
    font-size: 0.95rem;
    word-wrap: break-word;
    white-space: pre-wrap;
  }
  .message.user {
    align-self: flex-end;
    background: #0077b6;
    color: white;
    border-bottom-right-radius: 4px;
  }
  .message.bot {
    align-self: flex-start;
    background: #333;
    color: #e0e0e0;
    border-bottom-left-radius: 4px;
    position: relative;
  }

  /* Typing indicator */
  #typing {
    align-self: flex-start;
    background: #333;
    border-radius: 20px;
    padding: 12px 20px;
    font-style: italic;
    color: #999;
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 0.9rem;
  }
  #typing span {
    width: 6px;
    height: 6px;
    background: #999;
    border-radius: 50%;
    animation-name: blink;
    animation-duration: 1.4s;
    animation-iteration-count: infinite;
  }
  #typing span:nth-child(2) {
    animation-delay: 0.2s;
  }
  #typing span:nth-child(3) {
    animation-delay: 0.4s;
  }
  @keyframes blink {
    0%, 80%, 100% {opacity: 0.3;}
    40% {opacity: 1;}
  }

  footer {
    padding: 10px 15px;
    border-top: 1px solid #333;
    background: #161616;
    display: flex;
    align-items: center;
    gap: 10px;
  }

  #input-message {
    flex: 1;
    background: #262626;
    border: none;
    border-radius: 30px;
    padding: 10px 20px;
    font-size: 1rem;
    color: #e0e0e0;
    outline-offset: 2px;
  }
  #input-message::placeholder {
    color: #888;
  }

  #send-btn {
    background: #00b4d8;
    border: none;
    color: white;
    padding: 10px 16px;
    font-weight: bold;
    border-radius: 30px;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.3s ease;
    user-select: none;
  }
  #send-btn:disabled {
    background: #555;
    cursor: not-allowed;
  }
  #send-btn:hover:not(:disabled) {
    background: #0096c7;
  }

  /* Scrollbar for modern browsers */
  #chat::-webkit-scrollbar {
    width: 8px;
  }
  #chat::-webkit-scrollbar-track {
    background: #1e1e1e;
  }
  #chat::-webkit-scrollbar-thumb {
    background: #00b4d8;
    border-radius: 4px;
  }

  /* Responsive for smaller devices */
  @media (max-width: 400px) {
    #app {
      width: 100vw;
      height: 100vh;
      border-radius: 0;
    }
  }
</style>
</head>
<body>
<div id="app" role="main" aria-label="AI Chatbot app">
  <header>AI Chatbot like ChatGPT</header>
  <div id="chat" aria-live="polite" aria-relevant="additions" tabindex="0"></div>
  <footer>
    <input
      type="text"
      id="input-message"
      aria-label="Enter your message"
      placeholder="Type your message..."
      autocomplete="off"
      spellcheck="false"
      />
    <button type="button" id="send-btn" aria-label="Send message" disabled>Send</button>
  </footer>
</div>

<script>
(() => {
  const chat = document.getElementById('chat');
  const inputMessage = document.getElementById('input-message');
  const sendBtn = document.getElementById('send-btn');

  let apiKey = '';
  // Ask user for their OpenAI API key
  function promptApiKey() {
    apiKey = prompt('Please enter your OpenAI API Key (sk-...) to use the AI chatbot:', '');
    if (!apiKey || !apiKey.trim()) {
      alert('API Key is required to run the chatbot.');
      promptApiKey();
    }
  }

  promptApiKey();

  const headers = {
    'Content-Type': 'application/json',
    'Authorization': 'Bearer ' + apiKey.trim()
  };

  // Message history for chat API
  let messages = [
    { role: 'system', content: 'You are a helpful assistant.' }
  ];

  // Add message to chat container UI
  function addMessage(content, sender) {
    const msgDiv = document.createElement('div');
    msgDiv.classList.add('message');
    msgDiv.classList.add(sender);
    msgDiv.textContent = content;
    chat.appendChild(msgDiv);
    chat.scrollTop = chat.scrollHeight;
  }

  // Show typing indicator
  function showTyping() {
    const typingDiv = document.createElement('div');
    typingDiv.id = 'typing';
    typingDiv.setAttribute('aria-label', 'AI is typing');
    typingDiv.innerHTML = 'AI is typing<span></span><span></span><span></span>';
    chat.appendChild(typingDiv);
    chat.scrollTop = chat.scrollHeight;
    return typingDiv;
  }

  // Remove typing indicator
  function removeTyping(typingElem) {
    if (typingElem && typingElem.parentNode) {
      typingElem.parentNode.removeChild(typingElem);
    }
  }

  // Send message to OpenAI API and get a response
  async function getAIResponse() {
    sendBtn.disabled = true;
    inputMessage.disabled = true;

    const userText = inputMessage.value.trim();
    if (!userText) {
      sendBtn.disabled = false;
      inputMessage.disabled = false;
      return;
    }

    // Add user message to messages
    messages.push({ role: 'user', content: userText });
    addMessage(userText, 'user');

    inputMessage.value = '';
    inputMessage.focus();

    // Show typing
    const typingIndicator = showTyping();

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: headers,
        body: JSON.stringify({
          model: 'gpt-3.5-turbo',
          messages: messages,
          temperature: 0.7,
          max_tokens: 150,
          n: 1,
          stop: null
        })
      });

      if (!response.ok) {
        const err = await response.json();
        throw new Error(err.error?.message || 'API request failed with status ' + response.status);
      }

      const data = await response.json();
      const aiText = data.choices[0].message.content.trim();

      // Add AI message to chat & messages history
      messages.push({ role: 'assistant', content: aiText });
      addMessage(aiText, 'bot');
    } catch (error) {
      addMessage('Error: ' + error.message, 'bot');
    } finally {
      removeTyping(typingIndicator);
      sendBtn.disabled = false;
      inputMessage.disabled = false;
      inputMessage.focus();
    }
  }

  sendBtn.addEventListener('click', () => {
    if (!sendBtn.disabled) {
      getAIResponse();
    }
  });

  inputMessage.addEventListener('keydown', (e) => {
    // Enable/disable send button based on input content
    if (inputMessage.value.trim().length > 0) {
      sendBtn.disabled = false;
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        getAIResponse();
      }
    } else {
      sendBtn.disabled = true;
    }
  });

  // Initially disable send button
  sendBtn.disabled = true;
})();
</script>
</body>
</html>

